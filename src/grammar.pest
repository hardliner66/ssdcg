ws = { " " | "\t" | NEWLINE }
WHITESPACE = _{ ws }
COMMENT = _{ multi_comment | line_comment }

multi_comment = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = @{ "//" ~ (!"\n" ~ ANY)* }

file = _{ SOI ~ needs? ~ (import | data | service)* ~ EOI }

needs = { "needs" ~ "<" ~ (ident ~ ",")* ~ ident ~ ">" }

import = { attributes? ~ "import" ~ path ~ generic? ~ ";" }
data = { attributes? ~ "data" ~ ident ~ generic? ~ "{" ~ property* ~ "}" ~ ";" }
service = { attributes? ~ "service" ~ ident ~ "{" ~ (handler|depends)* ~ "}" ~ ";" }
template = { attributes? ~ "template" ~ ident ~ generic ~ "{" ~ (handler|depends)* ~ "}" ~ "for" ~ generic ~ ";" }

property = { attributes? ~ ident ~ ":" ~ typ ~ "," }

handler = { attributes? ~ "handles" ~ ident ~ "(" ~ arguments? ~ ")" ~ ("->" ~ typ)? ~ ";" }
depends = { attributes? ~ "depends" ~ "on" ~ path ~ ";" }

arguments = _{ (argument ~ ",")* ~ argument }
argument = { attributes? ~ ident ~ ":" ~ typ }

generic = { ("<" ~ types ~ ">") }

typ = @{ path ~ generic? }
types = _{ (typ ~ ",")* ~ typ }
path = @{ ident ~ ("::" ~ ident)* }
ident = @{ ASCII_ALPHA_UNDER ~ ASCII_ALPHANUMERIC_UNDER* }

attributes = { "@[" ~ (attribute ~ ",")* ~ attribute ~ "]" }
attribute = { path ~ ("(" ~ attr_arguments ~ ")")? }

attr_arguments = _{ (attr_argument ~ ",")* ~ attr_argument }
attr_argument = { path ~ ("=" ~ string)? }

string = ${ quote ~ chars ~ quote }
chars = { char* }
char = _{
!("\"" | "\\") ~ ANY
| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}
quote = { "\"" }

ASCII_ALPHA_UNDER = @{ ASCII_ALPHA | "_" }
ASCII_ALPHANUMERIC_UNDER = @{ ASCII_ALPHANUMERIC | "_" }
